buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath files(libs.class.superclass.protectionDomain.codeSource.location)
        classpath(libs.android.gradlePlugin)
        classpath(libs.kotlin.gradlePlugin)
        classpath(libs.kotlin.serializationPlugin)
        classpath(libs.hilt.gradlePlugin)

        classpath 'com.google.gms:google-services:4.3.13'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.9.1'


    }
}// Top-level build file where you can add configuration options common to all sub-projects/modules.

def keystorePropertiesFile = rootProject.file("./secrets/keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

def appPropertiesFile = rootProject.file("./config/app-settings.properties")
def appProperties = new Properties()
appProperties.load(new FileInputStream(appPropertiesFile))

subprojects {
    afterEvaluate { project ->
        if (project.hasProperty('android')) {
            android {
                compileSdkVersion 32

                defaultConfig {
                    minSdkVersion 21
                    targetSdkVersion 32
                    versionCode appProperties['app.version.code'] as int
                    versionName appProperties['app.version.name']

                    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                    vectorDrawables {
                        useSupportLibrary true
                    }

                    def buildVariant = getBuildVariant()
                    def environmentPath
                    if ((buildVariant == "Release")) {
                        environmentPath = appProperties["env.path.live"]
                    } else if ((buildVariant == "Debug")) {
                        environmentPath = appProperties["env.path.dev"]
                    } else {
                        environmentPath = appProperties["env.path.live"]
                    }

                    def envPropertiesFile = rootProject.file("./config/"+ environmentPath)
                    def envProperties = new Properties()
                    envProperties.load(new FileInputStream(envPropertiesFile))

                    for (String key : envProperties.keySet()) {
                        buildConfigField "String", key.replaceAll("\\.", "_").toUpperCase(), envProperties[key]
                    }
                }


                buildTypes {
                    debug {
                        manifestPlaceholders = [appName: "stapp-debug"]
                    }

                    release {
                        manifestPlaceholders = [appName: "@string/app_name"]
                        minifyEnabled true
                        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                    }
                }

                compileOptions {
                    sourceCompatibility JavaVersion.VERSION_1_8
                    targetCompatibility JavaVersion.VERSION_1_8
                }

                kotlinOptions {
                    jvmTarget = '1.8'
                }

                packagingOptions {
                    resources {
                        excludes += '/META-INF/{AL2.0,LGPL2.1}'
                    }
                }
            }
        }
    }
}

def getBuildVariant() {
    for (TaskExecutionRequest t : gradle.getStartParameter().getTaskRequests()) {
        for (String command : t.args) {
            if (command.matches(":app:generate(.*)Sources")) {
                return command.replaceAll(":app:generate(.*)Sources", "\$1")
            } else if (command.matches(":app:assemble(.*)")) {
                return command.replaceAll(":app:assemble(.*)", "\$1")
            }
        }
    }

    return "Release"
}